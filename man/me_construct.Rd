% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/me_construct.R
\name{me_construct}
\alias{me_construct}
\alias{me_construct_}
\title{Construct a measurement error tibble manually}
\usage{
me_construct(question_name, metrics, all_columns = FALSE)

me_construct_(question_name, metrics, all_columns = FALSE)
}
\arguments{
\item{question_name}{a character string that will be used as the question name}

\item{metrics}{a list containing new measurement error metrics. Currently it only
supports quality, reliability and validity. Can also specify one of the metrics
and the remaining are set to NA by default}

\item{all_columns}{if \code{TRUE} will return all columns (quite a few) that are
supported by the \code{measurementfree} package. If \code{FALSE} (default) it
will return only columns \code{question}, \code{quality}, \code{reliability} and \code{validity}.}
}
\value{
a \code{\link[tibble]{tibble}} of one row with the supplied metrics. It also has
class \code{me} for further manipulations within the \code{me} package.
}
\description{
\code{me_construct} is designed to create measurement error tibbles
by manually inserting new metrics such as quality or validity.
}
\details{
\code{me_construct_} is useful if you're interested in programming
with \code{measurementfree} rather than using it interactively. If you want to use
\code{me_construct} inside a function, use the equivalent \code{me_construct_}
which uses standard evaluation.
}
\examples{

me_construct(new_question, list(quality = 0.3))

me_construct(new_question, list(quality = 0.3, validity = 0.2))

# Note that specifying a column which is not availabe in me data
# will throw an error

\dontrun{
me_construct(new_question, list(random_col = 0.3, validity = 0.2))
# Error: One or more of the specified metrics don't match the me column names
}

# Currently only quality, reliability and validity are allowed.

}
